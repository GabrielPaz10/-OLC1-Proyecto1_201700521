
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ASintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ASintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ASintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\007\004" +
    "\000\002\007\003\000\002\012\004\000\002\012\003\000" +
    "\002\005\011\000\002\006\003\000\002\006\003\000\002" +
    "\010\007\000\002\011\005\000\002\011\005\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\003" +
    "\000\002\011\005\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\004\011\005\001\002\000\004\002\000\001" +
    "\002\000\004\004\012\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\006\004\ufffd\025\ufffd\001" +
    "\002\000\006\004\012\025\023\001\002\000\004\014\013" +
    "\001\002\000\004\025\014\001\002\000\004\006\015\001" +
    "\002\000\004\007\016\001\002\000\006\010\021\026\017" +
    "\001\002\000\004\005\ufff7\001\002\000\004\005\022\001" +
    "\002\000\004\005\ufff6\001\002\000\006\004\ufff8\025\ufff8" +
    "\001\002\000\004\006\042\001\002\000\006\004\ufffe\025" +
    "\ufffe\001\002\000\006\013\027\025\023\001\002\000\006" +
    "\013\ufffb\025\ufffb\001\002\000\004\013\031\001\002\000" +
    "\006\013\ufffc\025\ufffc\001\002\000\004\025\032\001\002" +
    "\000\004\014\037\001\002\000\006\012\ufff9\025\ufff9\001" +
    "\002\000\006\012\036\025\032\001\002\000\006\012\ufffa" +
    "\025\ufffa\001\002\000\004\002\uffff\001\002\000\004\027" +
    "\040\001\002\000\004\005\041\001\002\000\006\012\uffea" +
    "\025\uffea\001\002\000\004\007\043\001\002\000\026\011" +
    "\046\015\052\016\051\017\050\020\056\021\047\022\054" +
    "\023\045\024\055\027\044\001\002\000\030\005\uffef\011" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\027\uffef\001\002\000\030\005\uffec\011" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\024\uffec\027\uffec\001\002\000\004\025\067\001" +
    "\002\000\026\011\046\015\052\016\051\017\050\020\056" +
    "\021\047\022\054\023\045\024\055\027\044\001\002\000" +
    "\026\011\046\015\052\016\051\017\050\020\056\021\047" +
    "\022\054\023\045\024\055\027\044\001\002\000\026\011" +
    "\046\015\052\016\051\017\050\020\056\021\047\022\054" +
    "\023\045\024\055\027\044\001\002\000\026\011\046\015" +
    "\052\016\051\017\050\020\056\021\047\022\054\023\045" +
    "\024\055\027\044\001\002\000\004\005\060\001\002\000" +
    "\030\005\uffed\011\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\027\uffed\001\002\000" +
    "\030\005\uffeb\011\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\027\uffeb\001\002\000" +
    "\026\011\046\015\052\016\051\017\050\020\056\021\047" +
    "\022\054\023\045\024\055\027\044\001\002\000\030\005" +
    "\ufff1\011\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\027\ufff1\001\002\000\006\013" +
    "\ufff5\025\ufff5\001\002\000\026\011\046\015\052\016\051" +
    "\017\050\020\056\021\047\022\054\023\045\024\055\027" +
    "\044\001\002\000\030\005\ufff4\011\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\027" +
    "\ufff4\001\002\000\026\011\046\015\052\016\051\017\050" +
    "\020\056\021\047\022\054\023\045\024\055\027\044\001" +
    "\002\000\030\005\ufff3\011\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\027\ufff3\001" +
    "\002\000\030\005\ufff2\011\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\027\ufff2\001" +
    "\002\000\030\005\ufff0\011\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\027\ufff0\001" +
    "\002\000\004\012\070\001\002\000\030\005\uffee\011\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\027\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\006\004\010\005\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\023\007" +
    "\024\010\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\033\013\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\065\001\001\000\004\011\064" +
    "\001\001\000\004\011\062\001\001\000\004\011\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\061\001\001\000\002\001\001\000\004" +
    "\011\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ArrayList<ArrayList> info;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        System.out.println(s.sym);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ASintactico$actions {
  private final ASintactico parser;

  /** Constructor */
  CUP$ASintactico$actions(ASintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action_part00000000(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASintactico$result;

      /* select the action based on the action number */
      switch (CUP$ASintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = start_val;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASintactico$parser.done_parsing();
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= entrada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		
    //se guarda la info, que es la lista principal de instrucciones en la variable
    //info que se definió dentro del parser
    parser.info=a;

              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entrada ::= LLAVEIZ conjuntos expresiones DOBPOR DOBPOR evaluaciones LLAVEDE 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		ArrayList b = (ArrayList)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		ArrayList c = (ArrayList)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT=new ArrayList<>(); RESULT.add(a); RESULT.add(b); RESULT.add(c);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("entrada",1, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // conjuntos ::= conjuntos conjunto 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("conjuntos",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // conjuntos ::= conjunto 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT=new ArrayList(); RESULT.add(a);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("conjuntos",2, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expresiones ::= expresiones expresion 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expresiones ::= expresion 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT=new ArrayList(); RESULT.add(a);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // evaluaciones ::= evaluaciones evaluacion 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		ArrayList a = (ArrayList)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT=a; RESULT.add(b);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("evaluaciones",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // evaluaciones ::= evaluacion 
            {
              ArrayList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT=new ArrayList(); RESULT.add(a);
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("evaluaciones",8, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conjunto ::= CONJ DOSPUNTOS ID MENOS MAYOR tipos PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = a + " = " + b;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("conjunto",3, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-6)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipos ::= INTERV 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = a;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipos",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipos ::= LISTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = a;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("tipos",4, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= ID MENOS MAYOR e PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = a + " = " + e;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-4)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // e ::= CONCAT e e 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = "AND(" + e1 + ", " + e2 + ")";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // e ::= ALTERN e e 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = "OR(" + e1 + ", " + e2 + ")";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // e ::= KLEENE e 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = "*(" + e + ")";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // e ::= CPOS e 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = "+(" + e + ")";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // e ::= UNOMAS e 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = "?(" + e + ")";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // e ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = a;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // e ::= LLAVEIZ ID LLAVEDE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = "conj(" + a + ")";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-2)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // e ::= SALTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = a;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // e ::= CS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = a;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // e ::= CD 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.peek()).value;
		RESULT = a;
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("e",7, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // evaluacion ::= ID DOSPUNTOS CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-1)).value;
		RESULT = "[" + a + "," + b + "]";
              CUP$ASintactico$result = parser.getSymbolFactory().newSymbol("evaluacion",9, ((java_cup.runtime.Symbol)CUP$ASintactico$stack.elementAt(CUP$ASintactico$top-3)), ((java_cup.runtime.Symbol)CUP$ASintactico$stack.peek()), RESULT);
            }
          return CUP$ASintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ASintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ASintactico$do_action(
    int                        CUP$ASintactico$act_num,
    java_cup.runtime.lr_parser CUP$ASintactico$parser,
    java.util.Stack            CUP$ASintactico$stack,
    int                        CUP$ASintactico$top)
    throws java.lang.Exception
    {
              return CUP$ASintactico$do_action_part00000000(
                               CUP$ASintactico$act_num,
                               CUP$ASintactico$parser,
                               CUP$ASintactico$stack,
                               CUP$ASintactico$top);
    }
}

}
